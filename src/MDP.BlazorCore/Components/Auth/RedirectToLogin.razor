@* @using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.Extensions.Options

@inject NavigationManager _navigationManager
@inject IJSRuntime _javaScriptRuntime
@inject IAuthenticationSchemeProvider _authSchemeProvider
@inject IOptionsMonitor<CookieAuthenticationOptions> _authOptions

@namespace MDP.BlazorCore.WebApp
@code {
    
    // Methods
    protected override async Task OnInitializedAsync()
    {
        // DefaultScheme
        var defaultScheme = (await _authSchemeProvider.GetDefaultAuthenticateSchemeAsync())?.Name;
        if (string.IsNullOrEmpty(defaultScheme) == true) throw new InvalidOperationException($"{nameof(defaultScheme)}=null");

        // LoginPath
        var loginPath = _authOptions.Get(defaultScheme)?.LoginPath;
        if (string.IsNullOrEmpty(loginPath) == true) throw new InvalidOperationException($"{nameof(loginPath)}=null");

        // ReturnUrl
        var returnUrl = string.Empty;
        if (string.IsNullOrEmpty(returnUrl) == true) returnUrl = (new Uri(_navigationManager.Uri)).PathAndQuery;
        if (string.IsNullOrEmpty(returnUrl) == true) returnUrl = "/";
        returnUrl = Uri.EscapeDataString(returnUrl);

        // Redirect
        var script = $"window.location.href = '{loginPath}?returnUrl={returnUrl}';";
        await _javaScriptRuntime.InvokeVoidAsync("eval", script);
    }
} *@